{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","app/hooks.ts","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","useAppDispatch","useDispatch","useAppSelector","useSelector","Todolist","demo","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","state","auth","useNavigate","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","logoutHandler","AppBar","position","Toolbar","display","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.f3a9cf93.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '5fa5e884-bc01-4fa7-a760-a9be4c50cb3a'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>(`auth/login`, data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId?: number}>>(`auth/login`)\r\n    },\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type MeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { Dispatch } from 'redux'\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {AppThunk} from \"../../app/store\";\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.isLoggedIn}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setIsLoggedInAC = (isLoggedIn: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', isLoggedIn} as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType):AppThunk => (dispatch: Dispatch<ActionsType>)  => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.login(data)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(true))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch);\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport const logoutTC = ():AppThunk => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\n\n","import {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppThunk} from \"./store\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n\r\nexport const initializeAppTC = (): AppThunk => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setAppIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppIsInitializedActionType = ReturnType<typeof setAppIsInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetAppIsInitializedActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {AppThunk} from \"../../app/store\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): AppThunk => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string): AppThunk => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport {AppRootStateType, AppThunk} from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string): AppThunk => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string): AppThunk => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string): AppThunk => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string): AppThunk =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux'\nimport type {AppDispatch} from './store'\nimport {AppRootStateType} from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch <AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\nimport {useAppDispatch} from \"../../../app/hooks\";\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useAppSelector(state => state.todolists)\r\n    const tasks = useAppSelector(state => state.tasks)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n    const navigate = useNavigate();\r\n\r\n    // useEffect(() => {\r\n    //     if (isLoggedIn) {\r\n    //         const thunk = fetchTodolistsTC()\r\n    //         dispatch(thunk)\r\n    //     } else {\r\n    //         navigate('/login')\r\n    //     }\r\n    // }, [isLoggedIn])\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useAppSelector(state => state.app.error)\r\n    const dispatch = useAppDispatch();\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {loginTC} from \"./auth-reducer\";\nimport {Navigate} from \"react-router-dom\";\n\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    \n    const dispatch = useAppDispatch();\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Password is required';\n            } else if (values.password.length < 3) {\n                errors.password = 'Must be 3 characters or more';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm();\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Navigate to={'/'}/>\n    }\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email &&\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\n\n                        <TextField type=\"password\"\n                                   label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.email && formik.errors.password &&\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\n\n                        <FormControlLabel label={'Remember me'} control={\n                            <Checkbox checked={formik.values.rememberMe}\n                                      {...formik.getFieldProps('rememberMe')}/>\n                        }/>\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useAppDispatch, useAppSelector} from \"./hooks\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {HashRouter, Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {initializeAppTC} from \"./app-reducer\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const dispatch = useAppDispatch();\r\n    const status = useAppSelector((state) => state.app.status)\r\n    const isInitialized = useAppSelector((state) => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector((state) => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{display: \"flex\", justifyContent: \"space-between\"}}>\r\n                    <Typography variant=\"h6\">\r\n                        Todolist\r\n                    </Typography>\r\n                    {isLoggedIn && <Button variant=\"outlined\" color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={\"/\"} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={\"/login\"} element={<Login/>}/>\r\n                    <Route path={\"/404\"}element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path={\"/*\"} element={<Navigate to={'/404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport {AnyAction, applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware, {ThunkAction, ThunkDispatch} from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = ThunkDispatch<RootState, unknown, AnyAction>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, AnyAction>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\n\nconst root = ReactDOM.createRoot(\n    document.getElementById('root') as HTMLElement);\n\nroot.render(<Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n</Provider>);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}